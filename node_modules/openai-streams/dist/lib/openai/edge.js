import{streamArray as c}from"yield-stream";import{ENCODER as h}from"../../globs/shared.js";import{OpenAIError as e}from"../errors.js";import{ChatStream as I,EventStream as N,getTokensFromResponse as O,TokenStream as k}from"../streaming/index.js";import{OpenAIAPIEndpoints as b}from"../types.js";const C=async(n,m,{mode:r="tokens",apiKey:i=process.env.OPENAI_API_KEY,controller:d}={})=>{if(!i)throw new e("NO_API_KEY");const p=n==="completions"||n==="chat",f=b[n],o=await fetch(`https://api.openai.com/v1/${f}`,{method:"POST",body:JSON.stringify({...m,stream:p?!0:void 0}),headers:{Authorization:`Bearer ${i}`,"Content-Type":"application/json",Accept:"application/json"},signal:d?.signal});switch(o.status){case 401:throw new e("INVALID_API_KEY");case 404:throw new e("INVALID_MODEL");case 429:throw new e("RATE_LIMIT_REACHED");case 500:throw new e("SERVER_ERROR");default:if(!o.body)throw new e("UNKNOWN")}let t;const s={mode:r};if(p)switch(r){case"raw":t=N(o.body,s);break;case"tokens":switch(n){case"chat":t=I(o.body,s);break;default:t=k(o.body,s);break}break;default:throw console.error(`Unknown mode: ${r} for streaming response.`),new e("UNKNOWN")}else{const a=await o.text();switch(r){case"tokens":const l=JSON.parse(a),w=O(l);if(typeof w!="string"){console.error("No text choices received from OpenAI: "+a),t=c([]);break}const A=h.encode(w);t=c([A]);break;case"raw":const E=h.encode(a);t=c([E]);break;default:throw console.error(`Unknown mode: ${r} for non-streaming response.`),new e("UNKNOWN")}}return t};export{C as OpenAI};
