import{ENCODER as d,DECODER as S}from"../../globs/shared.js";import{ChatParser as f,TokenParser as O}from"./transforms.js";import{createParser as h}from"eventsource-parser";import{pipeline as s,yieldStream as y}from"yield-stream";import{OpenAIError as A}from"../errors.js";const m=(t,{mode:o="tokens"})=>new ReadableStream({async start(a){const p=h(n=>{if(n.type==="event"){const{data:r}=n;if(r==="[DONE]"){a.close();return}try{const e=JSON.parse(r);if(a.enqueue(d.encode(r)),o==="tokens"&&e?.choices){const{choices:i}=e;for(const c of i)if(c?.finish_reason==="length")throw new A("MAX_TOKENS")}}catch(e){a.error(e)}}});for await(const n of y(t)){const r=S.decode(n);try{const e=JSON.parse(r);e.hasOwnProperty("error")&&a.error(new Error(e.error.message))}catch{}p.feed(r)}}}),R=(t,o={mode:"tokens"})=>s(m(t,o),O),C=(t,o={mode:"tokens"})=>s(m(t,o),f);export{C as ChatStream,m as EventStream,R as TokenStream};
