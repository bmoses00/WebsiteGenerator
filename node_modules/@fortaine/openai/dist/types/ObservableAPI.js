import { of, from } from '../rxjsStub.js';
import { mergeMap, map } from '../rxjsStub.js';
import { OpenAIApiRequestFactory, OpenAIApiResponseProcessor } from "../apis/OpenAIApi.js";
export class ObservableOpenAIApi {
    requestFactory;
    responseProcessor;
    configuration;
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new OpenAIApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new OpenAIApiResponseProcessor();
    }
    cancelFineTune(fineTuneId, _options) {
        const requestContextPromise = this.requestFactory.cancelFineTune(fineTuneId, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.cancelFineTune(rsp)));
        }));
    }
    createAnswer(createAnswerRequest, _options) {
        const requestContextPromise = this.requestFactory.createAnswer(createAnswerRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createAnswer(rsp)));
        }));
    }
    createClassification(createClassificationRequest, _options) {
        const requestContextPromise = this.requestFactory.createClassification(createClassificationRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createClassification(rsp)));
        }));
    }
    createCompletion(createCompletionRequest, _options) {
        const requestContextPromise = this.requestFactory.createCompletion(createCompletionRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createCompletion(rsp)));
        }));
    }
    createEdit(createEditRequest, _options) {
        const requestContextPromise = this.requestFactory.createEdit(createEditRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createEdit(rsp)));
        }));
    }
    createEmbedding(createEmbeddingRequest, _options) {
        const requestContextPromise = this.requestFactory.createEmbedding(createEmbeddingRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createEmbedding(rsp)));
        }));
    }
    createFile(file, purpose, _options) {
        const requestContextPromise = this.requestFactory.createFile(file, purpose, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createFile(rsp)));
        }));
    }
    createFineTune(createFineTuneRequest, _options) {
        const requestContextPromise = this.requestFactory.createFineTune(createFineTuneRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createFineTune(rsp)));
        }));
    }
    createImage(createImageRequest, _options) {
        const requestContextPromise = this.requestFactory.createImage(createImageRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createImage(rsp)));
        }));
    }
    createImageEdit(image, prompt, mask, n, size, responseFormat, user, _options) {
        const requestContextPromise = this.requestFactory.createImageEdit(image, prompt, mask, n, size, responseFormat, user, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createImageEdit(rsp)));
        }));
    }
    createImageVariation(image, n, size, responseFormat, user, _options) {
        const requestContextPromise = this.requestFactory.createImageVariation(image, n, size, responseFormat, user, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createImageVariation(rsp)));
        }));
    }
    createModeration(createModerationRequest, _options) {
        const requestContextPromise = this.requestFactory.createModeration(createModerationRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createModeration(rsp)));
        }));
    }
    createSearch(engineId, createSearchRequest, _options) {
        const requestContextPromise = this.requestFactory.createSearch(engineId, createSearchRequest, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createSearch(rsp)));
        }));
    }
    deleteFile(fileId, _options) {
        const requestContextPromise = this.requestFactory.deleteFile(fileId, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteFile(rsp)));
        }));
    }
    deleteModel(model, _options) {
        const requestContextPromise = this.requestFactory.deleteModel(model, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteModel(rsp)));
        }));
    }
    downloadFile(fileId, _options) {
        const requestContextPromise = this.requestFactory.downloadFile(fileId, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.downloadFile(rsp)));
        }));
    }
    listEngines(_options) {
        const requestContextPromise = this.requestFactory.listEngines(_options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.listEngines(rsp)));
        }));
    }
    listFiles(_options) {
        const requestContextPromise = this.requestFactory.listFiles(_options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.listFiles(rsp)));
        }));
    }
    listFineTuneEvents(fineTuneId, stream, _options) {
        const requestContextPromise = this.requestFactory.listFineTuneEvents(fineTuneId, stream, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.listFineTuneEvents(rsp)));
        }));
    }
    listFineTunes(_options) {
        const requestContextPromise = this.requestFactory.listFineTunes(_options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.listFineTunes(rsp)));
        }));
    }
    listModels(_options) {
        const requestContextPromise = this.requestFactory.listModels(_options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.listModels(rsp)));
        }));
    }
    retrieveEngine(engineId, _options) {
        const requestContextPromise = this.requestFactory.retrieveEngine(engineId, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.retrieveEngine(rsp)));
        }));
    }
    retrieveFile(fileId, _options) {
        const requestContextPromise = this.requestFactory.retrieveFile(fileId, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.retrieveFile(rsp)));
        }));
    }
    retrieveFineTune(fineTuneId, _options) {
        const requestContextPromise = this.requestFactory.retrieveFineTune(fineTuneId, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.retrieveFineTune(rsp)));
        }));
    }
    retrieveModel(model, _options) {
        const requestContextPromise = this.requestFactory.retrieveModel(model, _options);
        let middlewarePreObservable = from(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).
            pipe(mergeMap((response) => {
            let middlewarePostObservable = of(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.retrieveModel(rsp)));
        }));
    }
}
//# sourceMappingURL=ObservableAPI.js.map