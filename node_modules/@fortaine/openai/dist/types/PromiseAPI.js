import { ObservableOpenAIApi } from './ObservableAPI.js';
export class PromiseOpenAIApi {
    api;
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableOpenAIApi(configuration, requestFactory, responseProcessor);
    }
    cancelFineTune(fineTuneId, _options) {
        const result = this.api.cancelFineTune(fineTuneId, _options);
        return result.toPromise();
    }
    createAnswer(createAnswerRequest, _options) {
        const result = this.api.createAnswer(createAnswerRequest, _options);
        return result.toPromise();
    }
    createClassification(createClassificationRequest, _options) {
        const result = this.api.createClassification(createClassificationRequest, _options);
        return result.toPromise();
    }
    createCompletion(createCompletionRequest, _options) {
        const result = this.api.createCompletion(createCompletionRequest, _options);
        return result.toPromise();
    }
    createEdit(createEditRequest, _options) {
        const result = this.api.createEdit(createEditRequest, _options);
        return result.toPromise();
    }
    createEmbedding(createEmbeddingRequest, _options) {
        const result = this.api.createEmbedding(createEmbeddingRequest, _options);
        return result.toPromise();
    }
    createFile(file, purpose, _options) {
        const result = this.api.createFile(file, purpose, _options);
        return result.toPromise();
    }
    createFineTune(createFineTuneRequest, _options) {
        const result = this.api.createFineTune(createFineTuneRequest, _options);
        return result.toPromise();
    }
    createImage(createImageRequest, _options) {
        const result = this.api.createImage(createImageRequest, _options);
        return result.toPromise();
    }
    createImageEdit(image, prompt, mask, n, size, responseFormat, user, _options) {
        const result = this.api.createImageEdit(image, prompt, mask, n, size, responseFormat, user, _options);
        return result.toPromise();
    }
    createImageVariation(image, n, size, responseFormat, user, _options) {
        const result = this.api.createImageVariation(image, n, size, responseFormat, user, _options);
        return result.toPromise();
    }
    createModeration(createModerationRequest, _options) {
        const result = this.api.createModeration(createModerationRequest, _options);
        return result.toPromise();
    }
    createSearch(engineId, createSearchRequest, _options) {
        const result = this.api.createSearch(engineId, createSearchRequest, _options);
        return result.toPromise();
    }
    deleteFile(fileId, _options) {
        const result = this.api.deleteFile(fileId, _options);
        return result.toPromise();
    }
    deleteModel(model, _options) {
        const result = this.api.deleteModel(model, _options);
        return result.toPromise();
    }
    downloadFile(fileId, _options) {
        const result = this.api.downloadFile(fileId, _options);
        return result.toPromise();
    }
    listEngines(_options) {
        const result = this.api.listEngines(_options);
        return result.toPromise();
    }
    listFiles(_options) {
        const result = this.api.listFiles(_options);
        return result.toPromise();
    }
    listFineTuneEvents(fineTuneId, stream, _options) {
        const result = this.api.listFineTuneEvents(fineTuneId, stream, _options);
        return result.toPromise();
    }
    listFineTunes(_options) {
        const result = this.api.listFineTunes(_options);
        return result.toPromise();
    }
    listModels(_options) {
        const result = this.api.listModels(_options);
        return result.toPromise();
    }
    retrieveEngine(engineId, _options) {
        const result = this.api.retrieveEngine(engineId, _options);
        return result.toPromise();
    }
    retrieveFile(fileId, _options) {
        const result = this.api.retrieveFile(fileId, _options);
        return result.toPromise();
    }
    retrieveFineTune(fineTuneId, _options) {
        const result = this.api.retrieveFineTune(fineTuneId, _options);
        return result.toPromise();
    }
    retrieveModel(model, _options) {
        const result = this.api.retrieveModel(model, _options);
        return result.toPromise();
    }
}
//# sourceMappingURL=PromiseAPI.js.map