import { ObservableOpenAIApi } from "./ObservableAPI.js";
export class ObjectOpenAIApi {
    api;
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableOpenAIApi(configuration, requestFactory, responseProcessor);
    }
    cancelFineTune(param, options) {
        return this.api.cancelFineTune(param.fineTuneId, options).toPromise();
    }
    createAnswer(param, options) {
        return this.api.createAnswer(param.createAnswerRequest, options).toPromise();
    }
    createClassification(param, options) {
        return this.api.createClassification(param.createClassificationRequest, options).toPromise();
    }
    createCompletion(param, options) {
        return this.api.createCompletion(param.createCompletionRequest, options).toPromise();
    }
    createEdit(param, options) {
        return this.api.createEdit(param.createEditRequest, options).toPromise();
    }
    createEmbedding(param, options) {
        return this.api.createEmbedding(param.createEmbeddingRequest, options).toPromise();
    }
    createFile(param, options) {
        return this.api.createFile(param.file, param.purpose, options).toPromise();
    }
    createFineTune(param, options) {
        return this.api.createFineTune(param.createFineTuneRequest, options).toPromise();
    }
    createImage(param, options) {
        return this.api.createImage(param.createImageRequest, options).toPromise();
    }
    createImageEdit(param, options) {
        return this.api.createImageEdit(param.image, param.prompt, param.mask, param.n, param.size, param.responseFormat, param.user, options).toPromise();
    }
    createImageVariation(param, options) {
        return this.api.createImageVariation(param.image, param.n, param.size, param.responseFormat, param.user, options).toPromise();
    }
    createModeration(param, options) {
        return this.api.createModeration(param.createModerationRequest, options).toPromise();
    }
    createSearch(param, options) {
        return this.api.createSearch(param.engineId, param.createSearchRequest, options).toPromise();
    }
    deleteFile(param, options) {
        return this.api.deleteFile(param.fileId, options).toPromise();
    }
    deleteModel(param, options) {
        return this.api.deleteModel(param.model, options).toPromise();
    }
    downloadFile(param, options) {
        return this.api.downloadFile(param.fileId, options).toPromise();
    }
    listEngines(param = {}, options) {
        return this.api.listEngines(options).toPromise();
    }
    listFiles(param = {}, options) {
        return this.api.listFiles(options).toPromise();
    }
    listFineTuneEvents(param, options) {
        return this.api.listFineTuneEvents(param.fineTuneId, param.stream, options).toPromise();
    }
    listFineTunes(param = {}, options) {
        return this.api.listFineTunes(options).toPromise();
    }
    listModels(param = {}, options) {
        return this.api.listModels(options).toPromise();
    }
    retrieveEngine(param, options) {
        return this.api.retrieveEngine(param.engineId, options).toPromise();
    }
    retrieveFile(param, options) {
        return this.api.retrieveFile(param.fileId, options).toPromise();
    }
    retrieveFineTune(param, options) {
        return this.api.retrieveFineTune(param.fineTuneId, options).toPromise();
    }
    retrieveModel(param, options) {
        return this.api.retrieveModel(param.model, options).toPromise();
    }
}
//# sourceMappingURL=ObjectParamAPI.js.map