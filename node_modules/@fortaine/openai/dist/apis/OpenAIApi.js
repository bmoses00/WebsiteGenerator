import { BaseAPIRequestFactory, RequiredError } from './baseapi.js';
import { HttpMethod } from '../http/http.js';
import FormData from "form-data";
import { URLSearchParams } from 'url';
import { ObjectSerializer } from '../models/ObjectSerializer.js';
import { ApiException } from './exception.js';
import { canConsumeForm, isCodeInRange } from '../util.js';
export class OpenAIApiRequestFactory extends BaseAPIRequestFactory {
    async cancelFineTune(fineTuneId, _options) {
        let _config = _options || this.configuration;
        if (fineTuneId === null || fineTuneId === undefined) {
            throw new RequiredError("OpenAIApi", "cancelFineTune", "fineTuneId");
        }
        const localVarPath = '/fine-tunes/{fine_tune_id}/cancel'
            .replace('{' + 'fine_tune_id' + '}', encodeURIComponent(String(fineTuneId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createAnswer(createAnswerRequest, _options) {
        let _config = _options || this.configuration;
        if (createAnswerRequest === null || createAnswerRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createAnswer", "createAnswerRequest");
        }
        const localVarPath = '/answers';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createAnswerRequest, "CreateAnswerRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createClassification(createClassificationRequest, _options) {
        let _config = _options || this.configuration;
        if (createClassificationRequest === null || createClassificationRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createClassification", "createClassificationRequest");
        }
        const localVarPath = '/classifications';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createClassificationRequest, "CreateClassificationRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createCompletion(createCompletionRequest, _options) {
        let _config = _options || this.configuration;
        if (createCompletionRequest === null || createCompletionRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createCompletion", "createCompletionRequest");
        }
        const localVarPath = '/completions';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createCompletionRequest, "CreateCompletionRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createEdit(createEditRequest, _options) {
        let _config = _options || this.configuration;
        if (createEditRequest === null || createEditRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createEdit", "createEditRequest");
        }
        const localVarPath = '/edits';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createEditRequest, "CreateEditRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createEmbedding(createEmbeddingRequest, _options) {
        let _config = _options || this.configuration;
        if (createEmbeddingRequest === null || createEmbeddingRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createEmbedding", "createEmbeddingRequest");
        }
        const localVarPath = '/embeddings';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createEmbeddingRequest, "CreateEmbeddingRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createFile(file, purpose, _options) {
        let _config = _options || this.configuration;
        if (file === null || file === undefined) {
            throw new RequiredError("OpenAIApi", "createFile", "file");
        }
        if (purpose === null || purpose === undefined) {
            throw new RequiredError("OpenAIApi", "createFile", "purpose");
        }
        const localVarPath = '/files';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const useForm = canConsumeForm([
            'multipart/form-data',
        ]);
        let localVarFormParams;
        if (useForm) {
            localVarFormParams = new FormData();
        }
        else {
            localVarFormParams = new URLSearchParams();
        }
        if (file !== undefined) {
            if (localVarFormParams instanceof FormData) {
                localVarFormParams.append('file', file.data, file.name);
            }
        }
        if (purpose !== undefined) {
            localVarFormParams.append('purpose', purpose);
        }
        requestContext.setBody(localVarFormParams);
        if (!useForm) {
            const contentType = ObjectSerializer.getPreferredMediaType([
                "multipart/form-data"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
        }
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createFineTune(createFineTuneRequest, _options) {
        let _config = _options || this.configuration;
        if (createFineTuneRequest === null || createFineTuneRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createFineTune", "createFineTuneRequest");
        }
        const localVarPath = '/fine-tunes';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createFineTuneRequest, "CreateFineTuneRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createImage(createImageRequest, _options) {
        let _config = _options || this.configuration;
        if (createImageRequest === null || createImageRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createImage", "createImageRequest");
        }
        const localVarPath = '/images/generations';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createImageRequest, "CreateImageRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createImageEdit(image, prompt, mask, n, size, responseFormat, user, _options) {
        let _config = _options || this.configuration;
        if (image === null || image === undefined) {
            throw new RequiredError("OpenAIApi", "createImageEdit", "image");
        }
        if (prompt === null || prompt === undefined) {
            throw new RequiredError("OpenAIApi", "createImageEdit", "prompt");
        }
        const localVarPath = '/images/edits';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const useForm = canConsumeForm([
            'multipart/form-data',
        ]);
        let localVarFormParams;
        if (useForm) {
            localVarFormParams = new FormData();
        }
        else {
            localVarFormParams = new URLSearchParams();
        }
        if (image !== undefined) {
            if (localVarFormParams instanceof FormData) {
                localVarFormParams.append('image', image.data, image.name);
            }
        }
        if (mask !== undefined) {
            if (localVarFormParams instanceof FormData) {
                localVarFormParams.append('mask', mask.data, mask.name);
            }
        }
        if (prompt !== undefined) {
            localVarFormParams.append('prompt', prompt);
        }
        if (n !== undefined) {
            localVarFormParams.append('n', n);
        }
        if (size !== undefined) {
            localVarFormParams.append('size', size);
        }
        if (responseFormat !== undefined) {
            localVarFormParams.append('response_format', responseFormat);
        }
        if (user !== undefined) {
            localVarFormParams.append('user', user);
        }
        requestContext.setBody(localVarFormParams);
        if (!useForm) {
            const contentType = ObjectSerializer.getPreferredMediaType([
                "multipart/form-data"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
        }
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createImageVariation(image, n, size, responseFormat, user, _options) {
        let _config = _options || this.configuration;
        if (image === null || image === undefined) {
            throw new RequiredError("OpenAIApi", "createImageVariation", "image");
        }
        const localVarPath = '/images/variations';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const useForm = canConsumeForm([
            'multipart/form-data',
        ]);
        let localVarFormParams;
        if (useForm) {
            localVarFormParams = new FormData();
        }
        else {
            localVarFormParams = new URLSearchParams();
        }
        if (image !== undefined) {
            if (localVarFormParams instanceof FormData) {
                localVarFormParams.append('image', image.data, image.name);
            }
        }
        if (n !== undefined) {
            localVarFormParams.append('n', n);
        }
        if (size !== undefined) {
            localVarFormParams.append('size', size);
        }
        if (responseFormat !== undefined) {
            localVarFormParams.append('response_format', responseFormat);
        }
        if (user !== undefined) {
            localVarFormParams.append('user', user);
        }
        requestContext.setBody(localVarFormParams);
        if (!useForm) {
            const contentType = ObjectSerializer.getPreferredMediaType([
                "multipart/form-data"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
        }
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createModeration(createModerationRequest, _options) {
        let _config = _options || this.configuration;
        if (createModerationRequest === null || createModerationRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createModeration", "createModerationRequest");
        }
        const localVarPath = '/moderations';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createModerationRequest, "CreateModerationRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async createSearch(engineId, createSearchRequest, _options) {
        let _config = _options || this.configuration;
        if (engineId === null || engineId === undefined) {
            throw new RequiredError("OpenAIApi", "createSearch", "engineId");
        }
        if (createSearchRequest === null || createSearchRequest === undefined) {
            throw new RequiredError("OpenAIApi", "createSearch", "createSearchRequest");
        }
        const localVarPath = '/engines/{engine_id}/search'
            .replace('{' + 'engine_id' + '}', encodeURIComponent(String(engineId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createSearchRequest, "CreateSearchRequest", ""), contentType);
        requestContext.setBody(serializedBody);
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async deleteFile(fileId, _options) {
        let _config = _options || this.configuration;
        if (fileId === null || fileId === undefined) {
            throw new RequiredError("OpenAIApi", "deleteFile", "fileId");
        }
        const localVarPath = '/files/{file_id}'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async deleteModel(model, _options) {
        let _config = _options || this.configuration;
        if (model === null || model === undefined) {
            throw new RequiredError("OpenAIApi", "deleteModel", "model");
        }
        const localVarPath = '/models/{model}'
            .replace('{' + 'model' + '}', encodeURIComponent(String(model)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async downloadFile(fileId, _options) {
        let _config = _options || this.configuration;
        if (fileId === null || fileId === undefined) {
            throw new RequiredError("OpenAIApi", "downloadFile", "fileId");
        }
        const localVarPath = '/files/{file_id}/content'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async listEngines(_options) {
        let _config = _options || this.configuration;
        const localVarPath = '/engines';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async listFiles(_options) {
        let _config = _options || this.configuration;
        const localVarPath = '/files';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async listFineTuneEvents(fineTuneId, stream, _options) {
        let _config = _options || this.configuration;
        if (fineTuneId === null || fineTuneId === undefined) {
            throw new RequiredError("OpenAIApi", "listFineTuneEvents", "fineTuneId");
        }
        const localVarPath = '/fine-tunes/{fine_tune_id}/events'
            .replace('{' + 'fine_tune_id' + '}', encodeURIComponent(String(fineTuneId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        if (stream !== undefined) {
            requestContext.setQueryParam("stream", ObjectSerializer.serialize(stream, "boolean", ""));
        }
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async listFineTunes(_options) {
        let _config = _options || this.configuration;
        const localVarPath = '/fine-tunes';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async listModels(_options) {
        let _config = _options || this.configuration;
        const localVarPath = '/models';
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async retrieveEngine(engineId, _options) {
        let _config = _options || this.configuration;
        if (engineId === null || engineId === undefined) {
            throw new RequiredError("OpenAIApi", "retrieveEngine", "engineId");
        }
        const localVarPath = '/engines/{engine_id}'
            .replace('{' + 'engine_id' + '}', encodeURIComponent(String(engineId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async retrieveFile(fileId, _options) {
        let _config = _options || this.configuration;
        if (fileId === null || fileId === undefined) {
            throw new RequiredError("OpenAIApi", "retrieveFile", "fileId");
        }
        const localVarPath = '/files/{file_id}'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async retrieveFineTune(fineTuneId, _options) {
        let _config = _options || this.configuration;
        if (fineTuneId === null || fineTuneId === undefined) {
            throw new RequiredError("OpenAIApi", "retrieveFineTune", "fineTuneId");
        }
        const localVarPath = '/fine-tunes/{fine_tune_id}'
            .replace('{' + 'fine_tune_id' + '}', encodeURIComponent(String(fineTuneId)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
    async retrieveModel(model, _options) {
        let _config = _options || this.configuration;
        if (model === null || model === undefined) {
            throw new RequiredError("OpenAIApi", "retrieveModel", "model");
        }
        const localVarPath = '/models/{model}'
            .replace('{' + 'model' + '}', encodeURIComponent(String(model)));
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET, _config);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
        let authMethod;
        authMethod = _config.authMethods["apiKeyAuth"];
        if (authMethod?.applySecurityAuthentication) {
            await authMethod?.applySecurityAuthentication(requestContext);
        }
        const defaultAuth = _options?.authMethods?.default || this.configuration?.authMethods?.default;
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }
        return requestContext;
    }
}
export class OpenAIApiResponseProcessor {
    async cancelFineTune(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "FineTune", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "FineTune", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createAnswer(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateAnswerResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateAnswerResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createClassification(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateClassificationResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateClassificationResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createCompletion(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateCompletionResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateCompletionResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createEdit(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateEditResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateEditResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createEmbedding(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateEmbeddingResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateEmbeddingResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createFile(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "OpenAIFile", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "OpenAIFile", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createFineTune(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "FineTune", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "FineTune", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createImage(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ImagesResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ImagesResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createImageEdit(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ImagesResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ImagesResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createImageVariation(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ImagesResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ImagesResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createModeration(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateModerationResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateModerationResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async createSearch(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateSearchResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "CreateSearchResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async deleteFile(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "DeleteFileResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "DeleteFileResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async deleteModel(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "DeleteModelResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "DeleteModelResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async downloadFile(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "string", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "string", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async listEngines(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListEnginesResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListEnginesResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async listFiles(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListFilesResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListFilesResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async listFineTuneEvents(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListFineTuneEventsResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListFineTuneEventsResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async listFineTunes(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListFineTunesResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListFineTunesResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async listModels(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListModelsResponse", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "ListModelsResponse", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async retrieveEngine(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "Engine", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "Engine", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async retrieveFile(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "OpenAIFile", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "OpenAIFile", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async retrieveFineTune(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "FineTune", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "FineTune", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
    async retrieveModel(response) {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "Model", "");
            return body;
        }
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            if (contentType === "text/event-stream")
                return response.body.stream();
            const body = ObjectSerializer.deserialize(ObjectSerializer.parse(await response.body.text(), contentType), "Model", "");
            return body;
        }
        throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }
}
//# sourceMappingURL=OpenAIApi.js.map